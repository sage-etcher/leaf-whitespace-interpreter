

/* enum of all (24 i think) instructions in the language */
typedef enum = 
{
    WS_PUSH,    /* SS B L */
    WS_LABEL,   /* LSS B L */
    ...
    WS_END      /* LLL */
} WS_INST;

/* structure to hold the kind of instruction, and a parameter if needed */
typdef struct 
{
    WS_INST type;
    int param;      /* there are no instructions that require more than 1 param */
} wsInstruction;


// import file into vvv 
char *whitespace-file-raw = "SS[pushbinary1]LSS[pushbinary2]LLSS[labelbinary]LLLL\0";

/* process raw-file into an easier to work with format */

// [name]s are not lists, they are irelevent binary values, 
// example vvv
wsInstruction *program = {
    { WS_PUSH,   [pushint1] },
    { WS_PUSH,   [pushint2] },
    { WS_LABEL,  [labelint] },
    { WS_END,    N/A }
};

/*
 * then interpret program instead. now that it is in a much nicer to work with
 * format, i wont have to look for "LSS B L" but rather 
 * program[n].type == WS_LABEL, which is MUCH easier to work with. gon need to 
 * rewrite some things but i think that would make this much more scalable? 
 * without cutting speed too much
 */